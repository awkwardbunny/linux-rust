initSidebarItems({"constant":[["COND_SUSPEND","If the IRQ is shared with a NO_SUSPEND user, execute this interrupt handler after suspending interrupts. For system wakeup devices users need to implement wakeup detection in their interrupt handlers."],["EARLY_RESUME","Resume IRQ early during syscore instead of at device resume time."],["FORCE_RESUME","Force enable it on resume even if [`NO_SUSPEND`] is set."],["IRQPOLL","Interrupt is used for polling (only the interrupt that is registered first in a shared interrupt is considered for performance reasons)."],["NOBALANCING","Flag to exclude this interrupt from irq balancing."],["NO_AUTOEN","Donâ€™t enable IRQ or NMI automatically when users request it. Users will enable it explicitly by `enable_irq` or `enable_nmi` later."],["NO_DEBUG","Exclude from runnaway detection for IPI and similar handlers, depends on `PERCPU`."],["NO_SUSPEND","Do not disable this IRQ during suspend. Does not guarantee that this interrupt will wake the system from a suspended state."],["NO_THREAD","Interrupt cannot be threaded."],["ONESHOT","Interrupt is not reenabled after the hardirq handler finished. Used by threaded interrupts which need to keep the irq line disabled until the threaded handler has been run."],["PERCPU","Interrupt is per cpu."],["PROBE_SHARED","Set by callers when they expect sharing mismatches to occur."],["SHARED","Allow sharing the irq among several devices."],["TIMER","Flag to mark this interrupt as timer interrupt."],["TRIGGER_FALLING","The interrupt is triggered when the signal goes from high to low."],["TRIGGER_HIGH","The interrupt is triggered while the signal is held high."],["TRIGGER_LOW","The interrupt is triggered while the signal is held low."],["TRIGGER_NONE","Use the interrupt line as already configured."],["TRIGGER_RISING","The interrupt is triggered when the signal goes from low to high."]]});